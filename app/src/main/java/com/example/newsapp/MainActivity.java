package com.example.newsapp;

import android.app.LoaderManager;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.Loader;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<List<News>> {

    /** Tag for log messages */
    private static final String LOG_TAG = MainActivity.class.getName();

    /** URL for news data from the GUARDIAN dataset */
    private static final String GUARDIAN_QUERY_LINK = "https://content.guardianapis.com/search";

    private NewsAdapter newsAdapter;

    /** TextView that is displayed when the list is empty */
    private TextView emptyStateTextView;

    /** Spinner that is displayed until the app fetches the data */
    private ProgressBar spinner;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        emptyStateTextView = findViewById(R.id.empty_view);
        spinner = findViewById(R.id.loading_spinner);

        // Get a reference to the ConnectivityManager to check state of network connectivity
        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

        // Get details on the currently active default data network
        NetworkInfo networkInfo = cm.getActiveNetworkInfo();

        // If there is a network connection, fetch data
        if (networkInfo != null && networkInfo.isConnected()){
            // Get a reference to the LoaderManager, in order to interact with loaders,
            // and then initialize it.
            getLoaderManager().initLoader(0, null, this);
        } else {
            emptyStateTextView.setText(R.string.no_internet_connection);
            spinner.setVisibility(View.GONE);
        }

        // Find a reference to the {@link ListView} in the layout
        ListView newsList = findViewById(R.id.list_items);

        newsList.setEmptyView(emptyStateTextView);

        // Create a new adapter that takes an empty list of news as input
        newsAdapter = new NewsAdapter(this, new ArrayList<>());

        // Set the adapter on the {@link ListView}
        // so the list can be populated in the user interface
        newsList.setAdapter(newsAdapter);

        newsList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                News currentNews = newsAdapter.getItem(position);
                Uri uri = Uri.parse(currentNews.getWebUrl());

                Intent websiteIntent = new Intent(Intent.ACTION_VIEW, uri);
                try {
                    startActivity(websiteIntent);
                } catch (ActivityNotFoundException e) {
                    Log.e(LOG_TAG, "There is no app to handle the intent", e);
                }
            }
        });
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<List<News>> onCreateLoader(int id, Bundle args) {
        // parse breaks apart the URI string that's passed into its parameter
        Uri baseUri = Uri.parse(GUARDIAN_QUERY_LINK);
        // buildUpon prepares the baseUri that we just parsed so we can add query parameters to it
        Uri.Builder builder = baseUri.buildUpon();

        // Append query parameter and its value
        builder.appendQueryParameter("q", "climate change");
        builder.appendQueryParameter("format", "json");
        builder.appendQueryParameter("from-date", "2017-01-01");
        builder.appendQueryParameter("order-by", "relevance");
        builder.appendQueryParameter("show-tags", "contributor");
        builder.appendQueryParameter("api-key", "test");

        // Create a new loader for the given URL
        return new NewsLoader(this, builder.toString());
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<List<News>> loader, List<News> data) {
        // Clear the adapter of previous news data
        newsAdapter.clear();

        // If there is a valid list of News, then add them to the adapter's data set.
        // This will trigger the ListView to update.
        if (data != null && !data.isEmpty()) {
            newsAdapter.addAll(data);
        }

        // Hide loading indicator because the data has been loaded
        spinner.setVisibility(View.GONE);

        // Set empty state text to display "No contents found!"
        emptyStateTextView.setText(R.string.no_contents);
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<List<News>> loader) {
        newsAdapter.clear();
    }
}
